import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler
from matplotlib import pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
import math

df = pd.read_csv("planet.csv")
df.columns = ["name", "distance", "diameter", "density", "color"]

print(df)

feature_dict = {
    0: "distance",
    1: "diameter",
    2: "density",
    3: "color",
}

# 标准化
X = df.values[:, 1:4]
y = df.values[:, 4]

print(df.values)

X_std = StandardScaler().fit_transform(X)
print(X_std)

# 协方差矩阵
mean_vector = np.mean(X_std, axis=0)
cov_matrix = (X_std - mean_vector).T.dot((X_std - mean_vector)) / (X_std.shape[0] - 1)
print('Covariance matrix \n%s' % cov_matrix)

# characteristic
cov_matrix = np.cov(X_std.T)
eig_value, eig_vectors = np.linalg.eig(cov_matrix)
print("Eigenvectors \n%s" % eig_vectors)
print("\nEigenvalues \n%s" % eig_value)

# one-to-one
eig_pairs = [(np.abs(eig_value[i]), eig_vectors[:, i]) for i in range(len(eig_value))]
print(eig_pairs)
print("*************************************")

eig_pairs.sort(key=lambda x: x[0], reverse=True)

print("Eigenvalues in descending order: ")
for i in eig_pairs:
    print(i[0])

total = sum(eig_value)
var_exp = [(i / total) * 100 for i in sorted(eig_value, reverse=True)]
print(var_exp)

cum_var_exp = np.cumsum(var_exp, dtype=list)
print(cum_var_exp)

# 画图
# plt.figure(figsize=(10, 7))
# plt.bar(range(3), var_exp, alpha=0.5, align="center", label="individual explained variance")
# plt.step(range(3), cum_var_exp, where="mid", label="cumulative explained variance")
# plt.ylabel("Explained variance ration")
# plt.xlabel("Principal components")
# plt.legend(loc="best")
# plt.tight_layout()
# plt.show()

matrix_w = np.hstack((eig_pairs[0][1].reshape(3, 1), eig_pairs[1][1].reshape(3, 1)))
print("Matrix W: \n", matrix_w)

Y = X_std.dot(matrix_w)

# 降维前
# plt.figure(figsize=(10, 7))
# for lab, col in zip((1, 2), ("black", "blue")):
#     plt.scatter(X[y==lab, 2], X[y==lab, 1], label=lab, c=col)
#
# for i in range(len(df.values)):
#     plt.annotate(df.values[i][0], xy=(df.values[i][3] - 0.1, df.values[i][2] + 1500))
#     # print(df.values[i][0], df.values[i][3], df.values[i][2])
#
# plt.xlabel("density")
# plt.ylabel("diameter")
# plt.tight_layout()
# plt.show()

# 降维后
plt.figure(figsize=(10, 7))
i = 0
print(X)
print(Y)


# for i in range(len(Y)):
#     if df.values[i][4] == 1:
#         plt.scatter(Y[i][0], Y[i][1], c="black")
#     elif df.values[i][4] == 2:
#         plt.scatter(Y[i][0], Y[i][1], c="blue")
#     else:
#         print("Invalid")
#     plt.annotate(df.values[i][0], xy=(Y[i][0] - 0.1, Y[i][1] + 0.05))
#
# plt.xlabel("Principal Component 1")
# plt.ylabel("Principal Component 2")
# plt.tight_layout()
# plt.show()

fig = plt.figure(1, figsize=(10, 7))
plt.clf()
ax = Axes3D(fig, rect=[0, 0, .95, 1], elev=48, azim=134)

plt.cla()


for i in range(len(df.values)):
    if df.values[i][4] == 1:
        ax.scatter(df.values[i][1], df.values[i][1], df.values[i][3], c="black",
                   cmap=plt.cm.nipy_spectral)
    else:
        if df.values[i][4] == 2:
            ax.scatter(df.values[i][1], df.values[i][1], df.values[i][3], c="blue",
                   cmap=plt.cm.nipy_spectral)
    ax.text3D(df.values[i][1], df.values[i][1] - 1, df.values[i][3] + 0.2, df.values[i][0],
              horizontalalignment="center",
              bbox=dict(alpha=0.5, edgecolor='w', facecolor='w'))

# for name, label in [('Setosa', 0), ('Versicolour', 1), ('Virginica', 2)]:
#     ax.text3D(X[y == label, 0].mean(),
#               X[y == label, 1].mean() + 1.5,
#               X[y == label, 2].mean(), name,
#               horizontalalignment='center',
#               bbox=dict(alpha=.5, edgecolor='w', facecolor='w'))
# Reorder the labels to have colors matching the cluster results
# y = np.choose(y, [1, 2, 0]).astype(np.float)
# ax.scatter(X[:, 0], X[:, 1], X[:, 2], c=y, cmap=plt.cm.nipy_spectral,
#            edgecolor='k')

# ax.w_xaxis.set_ticklabels([])
# ax.w_yaxis.set_ticklabels([])
# ax.w_zaxis.set_ticklabels([])
ax.set_xlabel("distance")
ax.set_ylabel("diameter")
ax.set_zlabel("density")

plt.show()
